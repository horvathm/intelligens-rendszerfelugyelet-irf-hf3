--- RESTServer.cs	2016-04-25 09:17:17.919999500 +0200
+++ RESTServer-new.cs	2016-05-06 22:39:30.604783000 +0200
@@ -6,6 +6,8 @@
 using System.Reflection;
 using System.Threading;
 using Grapevine.Util;
+using System.Diagnostics;
+using System.Collections;
 
 namespace Grapevine.Server
 {
@@ -16,8 +18,7 @@
 
     public class RESTServer : Responder, IDisposable
     {
-        #region Instance Variables
-
+        #region Instance Variables   
         private readonly Dictionary<string, RESTResource> _resources;
         private readonly List<MethodInfo> _routes;
 
@@ -29,6 +30,13 @@
         private readonly ManualResetEvent _ready = new ManualResetEvent(false);
         private Queue<HttpListenerContext> _queue = new Queue<HttpListenerContext>();
 
+        //LockObject szálkezeléshez tartozó lock objektum
+        private object _lockObject = new object();
+
+        //ArrayList, amiben a számlálók által vett mintákat tárolunk.
+        private ArrayList _sampleListAvgPost = new ArrayList();
+        private ArrayList _sampleListReqPerSec = new ArrayList();
+
         #endregion
 
         #region Constructors
@@ -54,6 +62,15 @@
 
             this._workers = new Thread[this.MaxThreads];
             this._listenerThread = new Thread(this.HandleRequests);
+
+            //Szamlalok definicioja: IRF_Rest kategoria, CounterName, instanceName, ReadOnly 
+            this._NOI64NSTran = new PerformanceCounter(Counters.CategoryName, "NOI64NSTran", this.Port, false);
+            this._NOI64STran = new PerformanceCounter(Counters.CategoryName, "NOI64STran", this.Port, false);
+            this._AC64PostReq = new PerformanceCounter(Counters.CategoryName, "AC64PostReq", this.Port, false);
+            this._AC64PostReqBase = new PerformanceCounter(Counters.CategoryName, "AC64PostReqBase", this.Port, false);
+            this._ROCPS64ReqPerSec = new PerformanceCounter(Counters.CategoryName, "ROCPS64ReqPerSec", this.Port, false);
+            this._NOI64PostReqCount = new PerformanceCounter(Counters.CategoryName, "NOI64PostReqCount", this.Port, false);
+            this._NOI64GetReqCount = new PerformanceCounter(Counters.CategoryName, "NOI64GetReqCount", this.Port, false);
         }
 
         public RESTServer(Config config) : this(host: config.Host, port: config.Port, protocol: config.Protocol, dirindex: config.DirIndex, webroot: config.WebRoot, maxthreads: config.MaxThreads) { }
@@ -339,6 +356,97 @@
         }
         private string _protocol;
 
+        /// <summary>
+        /// Publikus property. Visszaadja a private PC erteket. Privat lathatosagu beallitasi lehetoseget nem hasznaltam ki.
+        /// </summary>
+        public long NOI64NSTran
+        {
+            get { return _NOI64NSTran.RawValue; }
+            private set { lock (_lockObject) { _NOI64NSTran.RawValue = value; } }
+        }
+        private PerformanceCounter _NOI64NSTran;
+
+        /// <summary>
+        /// Publikus property. Visszaadja a private PC erteket.Privat lathatosagu beallitasi lehetoseget nem hasznaltam ki.
+        /// </summary>
+        public long NOI64STran
+        {
+            get { return _NOI64STran.RawValue; }
+            private set { lock (_lockObject) { _NOI64STran.RawValue = value; } }
+        }
+        private PerformanceCounter _NOI64STran;
+
+        /// <summary>
+        /// Publikus property a _sampleListAvgPost ArrayList utolso ket bejegyzese alapjan
+        /// kiszamolja az atlagot a beepitett szamolasi mechanizmus szerint.
+        /// </summary>
+        public double AC64PostReq
+        {
+            get
+            {
+                int i = _sampleListAvgPost.Count;
+                if (i == 0)
+                {
+                    return 0;
+                }
+                else if (i == 1)
+                {
+                    return AC64PostReqFullAverage();
+                }
+                else
+                {
+                    return (double)CounterSampleCalculator.ComputeCounterValue((CounterSample)_sampleListAvgPost[i - 2], (CounterSample)_sampleListAvgPost[i - 1]);
+                }
+            }
+        }
+        private PerformanceCounter _AC64PostReq;
+        private PerformanceCounter _AC64PostReqBase;
+
+        /// <summary>
+        /// Publikus property. Visszaadja a privat elerhetosegu Post requesteket szamolo PC erteket.
+        /// </summary>
+        public long NOI64PostReqCount
+        {
+            get
+            {
+                return _NOI64PostReqCount.RawValue;
+            }
+        }
+        private PerformanceCounter _NOI64PostReqCount;
+
+        /// <summary>
+        /// Publikus property. Visszaadja a privat elerhetosegu Get requesteket szamolo PC erteket.
+        /// </summary>
+        public long NOIGetReqCount
+        {
+            get
+            {
+                return _NOI64GetReqCount.RawValue;
+            }
+        }
+        private PerformanceCounter _NOI64GetReqCount;
+
+        /// <summary>
+        /// Publikus property. Lekerdezheto vele a _sampleListReqPerSec ArrayList utolso ket bejegyzese,
+        /// ami alapjan kiszamolja a az egy masodperc alatt vegrehajtott muveleteket. 
+        /// </summary>
+        public double ROCPS64ReqPerSec
+        {
+            get
+            {
+                int i = _sampleListReqPerSec.Count;
+                if (i <= 1)
+                {
+                    return 0;
+                }
+                else
+                {
+                    return CounterSampleCalculator.ComputeCounterValue((CounterSample)_sampleListReqPerSec[i - 2], (CounterSample)_sampleListReqPerSec[i - 1]);
+                }
+            }
+        }
+        public PerformanceCounter _ROCPS64ReqPerSec;
+
         #endregion
 
         #region Public Methods
@@ -351,7 +459,17 @@
             if (!this.IsListening)
             {
                 try
-                {
+                {   
+                    //Minden indításkor init valtozok
+                    _NOI64NSTran.RawValue = 0;
+                    _NOI64STran.RawValue = 0;
+                    _AC64PostReq.RawValue = 0;
+                    _AC64PostReqBase.RawValue = 0;
+                    _ROCPS64ReqPerSec.RawValue = 0;
+                    _NOI64GetReqCount.RawValue = 0;
+                    _NOI64PostReqCount.RawValue = 0;
+                    
+
                     this.FireDelegate(this.OnBeforeStart);
 
                     this.IsListening = true;
@@ -414,6 +532,38 @@
             this.Stop();
         }
 
+        /// <summary>
+        /// Publikus metodus a Post keresek paykoad hossz atlaganak lekeresehez adott intervallumon belul. 
+        /// </summary>
+        /// <param name="from">intervallum kezdete</param><param name="to">intervallum vege</param>
+        public double AC64PostReqInterval(int from, int to)
+        {
+
+            if (_sampleListAvgPost.Count == 0)
+            {
+                return 0;
+            }
+            else if (_sampleListAvgPost.Count == 1)
+            {
+                return _AC64PostReq.RawValue;
+            }
+            else
+            {
+                if (from < 0) from = 0;
+                if (to >= _sampleListAvgPost.Count) to = _sampleListAvgPost.Count - 1;
+                return (double)CounterSampleCalculator.ComputeCounterValue((CounterSample)_sampleListAvgPost[from], (CounterSample)_sampleListAvgPost[to]);
+            }
+        }
+
+        /// <summary>
+        /// Publikus metodus. Az eddigi osszes Post keres payload hosszainak az atlaga
+        /// </summary>
+        /// <returns>Osszes Post keres payloadjainak az atlaga</returns>
+        public double AC64PostReqFullAverage()
+        {
+            return _AC64PostReq.RawValue / _AC64PostReqBase.RawValue;
+        }
+
         #endregion
 
         #region Private Threading Methods
@@ -425,6 +575,22 @@
                 try
                 {
                     var context = this._listener.GetContext();
+                    //bejovo request eseten, ha az Get volt, akkor a _NOI64GetReqCount szamlalot inkrementaljuk
+                    if (context.Request.HttpMethod.Equals("GET"))
+                    {
+                        _NOI64GetReqCount.Increment();
+                    }
+                    //ha a bejovo request Post volt, akkor a _NOI64PostReqCount szamlalot inkrementaljuk
+                    if (context.Request.HttpMethod.Equals("POST"))
+                    {
+                        //ha a request Post volt, akkor meg a keresek payloadjanak atlagos merete is kell
+                        var length = (int)context.Request.ContentLength64;
+                        _NOI64PostReqCount.Increment();
+                        if(length !=-1)
+                            _AC64PostReq.IncrementBy(length);
+                        _AC64PostReqBase.Increment();
+                        _sampleListAvgPost.Add(_AC64PostReq.NextSample());
+                    }
                     this.QueueRequest(context);
                 }
                 catch (Exception e)
@@ -443,6 +609,10 @@
                     this._queue.Enqueue(context);
                     this._ready.Set();
                 }
+                //Miutan varakozasi sorba bekerult a keres inkrementaljuk masodpercenkent beerkezo keresek szamlalojat
+                //  ennel a pontnal tekintettem a kerest beerkezettnek
+                this._ROCPS64ReqPerSec.Increment();
+                this._sampleListReqPerSec.Add(_ROCPS64ReqPerSec.NextSample());
             }
             catch (Exception e)
             {
@@ -461,6 +631,8 @@
                 var route = this._routes.FirstOrDefault(mi => mi.GetCustomAttributes(true).Any(attr => rpath.Matches(((RESTRoute)attr).PathInfo) && context.Request.HttpMethod.ToUpper().Equals(((RESTRoute)attr).Method.ToString())));
                 if (!object.ReferenceEquals(route, null))
                 {
+                    //Sikeres requestek szamlalojat noveljuk
+                    _NOI64STran.Increment();
                     route.Invoke(this._resources[route.ReflectedType.Name], new object[] { context });
                     notfound = false;
                 }
@@ -468,7 +640,8 @@
                 {
                     var filename = this.GetFilePath(context.Request.RawUrl);
                     if (!object.ReferenceEquals(filename, null))
-                    {
+                    {   //Sikeres requestek szamlalojat noveljuk
+                        _NOI64STran.Increment();
                         this.SendFileResponse(context, filename);
                         notfound = false;
                     }
@@ -485,10 +658,14 @@
                 {
                     if (object.ReferenceEquals(scripterr, null))
                     {
+                        //ha nem talaltuk meg es scripterr == NULL, akkor noveljuk a sikertelen requestek szamlalojat
+                        _NOI64NSTran.Increment();
                         this.NotFound(context);
                     }
                     else
                     {
+                        //ha scripterr != NULL, akkor noveljuk a sikertelen requestek szamlalojat
+                        _NOI64NSTran.Increment();
                         this.InternalServerError(context, scripterr);
                     }
                 }
